AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Aptitude
  TODO: Description Here 
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3

Resources:
  AptitudeApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Auth:
        DefaultAuthorizer: AptitudeLambdaTokenAuthorizer
        Authorizers:
          AptitudeLambdaTokenAuthorizer:
            FunctionArn: !GetAtt AptitudeAuthFunction.Arn

  AptitudeAuthFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: auth/
      Handler: app.handler
      Runtime: nodejs14.x

  UserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: user/
      Handler: app.handler
      Runtime: nodejs14.x
      Events:
        GetUser:
          Type: Api 
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /user
            Method: GET
            Auth:
              Authorizer: NONE
        EditProfile:
          Type: Api 
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /user
            Method: PUT
            Auth:
              Authorizer: NONE
        Signup:
          Type: Api 
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /user
            Method: POST
            Auth:
              Authorizer: NONE
        DeleteUser:
          Type: Api 
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /user
            Method: DELETE
            Auth:
              Authorizer: NONE
      Policies:
        DynamoDBCrudPolicy:
          TableName: !Ref UserTable

  QuestionFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: question/
      Handler: app.handler
      Runtime: nodejs14.x
      Events:
        GetQuestion:
          Type: Api
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /question
            Method: GET
            Auth:
              Authorizer: NONE
        GetQuestions:
          Type: Api
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /questions
            Method: GET
            Auth:
              Authorizer: NONE
        CreateQuestion:
          Type: Api
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /question
            Method: PUT
            Auth:
              Authorizer: NONE
        EditQuestion:
          Type: Api
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /question
            Method: POST
            Auth:
              Authorizer: NONE
        DeleteQuestion:
          Type: Api
          Properties:
            RestApiId: !Ref AptitudeApi
            Path: /question
            Method: DELETE
            Auth:
              Authorizer: NONE



  # dynamodb
  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: user
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  QuestionTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: question
      PrimaryKey:
        Name: id
        Type: String
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5 


Outputs:
  ApiUrl:
      Description: The target URL of the created API
      Value: !Sub "https://${AptitudeApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
      Export:
        Name: ApiUrl